package org.everit.json.schema.loader.internal;import static org.junit.Assert.assertEquals;import static org.mockito.Mockito.mock;import static org.mockito.Mockito.when;import java.io.IOException;import java.io.InputStream;import java.io.UncheckedIOException;import org.everit.json.schema.loader.SchemaClient;import org.json.JSONObject;import org.junit.Test;public class JSONPointerTest {    @Test    public void testQueryWithEmptyFragment() {        JSONObject document = new JSONObject("{\"key\": \"value\"}");        JSONPointer pointer = JSONPointer.forDocument(document, "");        JSONPointer.QueryResult result = pointer.query();        assertEquals(document, result.getContainingDocument());        assertEquals(document, result.getQueryResult());    }    @Test    public void testQueryWithRootFragment() {        JSONObject document = new JSONObject("{\"key\": \"value\"}");        JSONPointer pointer = JSONPointer.forDocument(document, "#");        JSONPointer.QueryResult result = pointer.query();        assertEquals(document, result.getContainingDocument());        assertEquals(document, result.getQueryResult());    }    @Test(expected = UncheckedIOException.class)    public void testUncheckedIOExceptionInFinallyBlock() throws IOException {        SchemaClient schemaClient = mock(SchemaClient.class);        InputStream inputStream = mock(InputStream.class);        when(inputStream.read()).thenThrow(new IOException());        when(schemaClient.get("http://example.com/schema.json")).thenReturn(inputStream);        JSONPointer pointer = JSONPointer.forURL(schemaClient, "http://example.com/schema.json#/key");        pointer.query();    }    @Test(expected = IllegalArgumentException.class)    public void testQueryWithInvalidFragment() {        JSONObject document = new JSONObject("{\"key\": \"value\"}");        JSONPointer pointer = JSONPointer.forDocument(document, "/invalid");        pointer.query();    }}